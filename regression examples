"
Author: Dokyun Lee
Date: 2016 Jan
First part taken from Machine Learning in R
Goal: getting started with R 
This script will go through some basic linear regression
so that you can get some experience with R doing things you already know 
such as simple linear regression

Make sure you download the files from 
Canvas
"

##################################Getting around R#####################################
#print your current working directory
getwd()

#set your working directory 
setwd("insert path to your desired directory.")

#for me
setwd("/Users/dokyunl/Dropbox/COURSES/DMBA/2018 UNDER/DEMOR/DEMO LINEAR REGRESSION")

#whenever you have a question about a function, ?functionname
?setwd

#Binary Operators
5 == 1
"data" == "data"

# Boolean Operators - AND, OR
((5*5) > 10) & (1<5)
(2 > 5) | (5 < 3)

#Array, matrix, etc
1:10
c(1:10, 1000)
cbind(1,2,3,4)
rbind(1,2,3,4)
matrix(0, 3,5)
coolvector=c(2,3,4,5)
coolvector<-c(2,3,4,6)
coolvector*4


#R Data
## Vectors -----

# create vectors of data for three medical patients
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)

# access the second element in body temperature vector
# unlike many programming languages, R starts the index with 1
temperature[2]

## examples of accessing items in vector
# include items in the range 2 to 3
temperature[2:3]

# exclude item 2 using the minus sign
temperature[-2]
temperature[-c(2,3)]
# use a vector to indicate whether to include item
temperature[c(TRUE, TRUE, FALSE)]

## Factors ----- categorical (nominal) and ordinals

# add gender factor
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender

# add blood type factor
blood <- factor(c("O", "AB", "A"),
                levels = c("A", "B", "AB", "O"))
blood

# add ordered factor  ordinals
symptoms <- factor(c("SEVERE", "MILD", "MODERATE"),
                   levels = c("MILD", "MODERATE", "SEVERE"),
                   ordered = TRUE)
symptoms

# check for symptoms greater than moderate
symptoms >= "MODERATE"

## Lists -----

# display information for a patient
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]

# create list for a patient
subject1 <- list(fullname = subject_name[1], 
                 temperature = temperature[1],
                 flu_status = flu_status[1],
                 gender = gender[1],
                 blood = blood[1],
                 symptoms = symptoms[1])

# display the patient
subject1

## methods for accessing a list

# get a single list value by position (returns a sub-list)
subject1[2]

# get a single list value by position (returns a numeric vector)
subject1[[2]]

# get a single list value by name
subject1$temperature

# get several list items by specifying a vector of names
subject1[c("temperature", "flu_status")]

## access a list like a vector
# get values 2 and 3
subject1[2:3]

## Data frames -----

# create a data frame from medical patient data

pt_data <- data.frame(subject_name, temperature, flu_status, gender,
                      blood, symptoms, stringsAsFactors = FALSE)

# display the data frame
pt_data

## accessing a data frame

# get a single column
pt_data$subject_name

# get several columns by specifying a vector of names
pt_data[c("temperature", "flu_status")]

# this is the same as above, extracting temperature and flu_status
pt_data[2:3]

# accessing by row and column
pt_data[1, 2]

# accessing several rows and several columns using vectors
pt_data[c(1, 3), c(2, 4)]

## Leave a row or column blank to extract all rows or columns

# column 1, all rows
pt_data[, 1]
# row 1, all columns
pt_data[1, ]
# all rows and all columns
pt_data[ , ]

# the following are equivalent
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]

## Matrixes -----

# create a 2x2 matrix
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m

# equivalent to the above
m <- matrix(c(1, 2, 3, 4), ncol = 2)
m

# create a 2x3 matrix
m <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
m

# create a 3x2 matrix
m <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
m

# extract values from matrixes
m[1, 1]
m[3, 2]

# extract rows
m[1, ]

# extract columns
m[, 1]

##### Managing data with R ------------

## saving, loading, and removing R data structures

# show all data structures in memory
ls()

# remove the m and subject1 objects
rm(m, subject1)
ls()

#remove all data
rm(list=ls())

#for loop
for(i in 1:10){
  print("Hello World, Goodye World")
}

########################################DATA########################################

#auto-mpg.data.txt is the dataset of car MPG obtained 
#from http://archive.ics.uci.edu/ml/datasets/Auto+MPG
#auto-mpg.names.txt contains all the details

#read in the data 
car_mpg <- read.table("auto-mpg.data-original.txt")
#see the first few lines of the data
head(car_mpg)

#name the columns given from the auto-mpg.names.txt
#generally avoid spaces in column names for syntax sakes
colnames(car_mpg)<-c("mpg","cylinders","displacement","horsepower",
                     "weight","acceleration","model_year","origin",
                     "car_name")

head(car_mpg)

#just see the car names or mpg. There are several syntax
car_mpg[,"car_name"]
car_mpg$"car_name"
car_mpg$car_name
car_mpg$mpg
car_mpg$"mpg"

#get summary stats of each column
summary(car_mpg)
#another function for variable type summary and examples
str(car_mpg)
#get row and col numbers
dim(car_mpg) #406 9
#let's get even more summary. I want to use a library called YaleToolkit
#and a function within that library. So I need to install this library
install.packages("YaleToolkit", dependencies=T)
library(YaleToolkit)
whatis(car_mpg)


#there are some missing values so let's get rid of those
#complete.cases(dataset) returns row numbers with complete
#cases. then you need to select those rows to be the dataset
car_mpg<- car_mpg[complete.cases(car_mpg),]
dim(car_mpg) # 392 9
# 14 rows were dropped

#make each columns in car_mpg into callable vectors
attach(car_mpg)

#simple statistics 
mean(mpg)
var(mpg)
sd(mpg)
table(mpg)

########################################VISUALIZE########################################

#get some scatterplots of the data 
#pch just determines the point shape
#cex determines the thickness of the shape 
#?pairs for more detail
pairs(car_mpg, pch=1, cex=0.2)

hist(mpg)
quantile(mpg)
quantile(mpg, na.rm = TRUE)

#box plot for numeric data columns 1-8 are numeric
#we are going to create 8 boxplots but put them in 3 by 3 formation
par(mfrow=c(3,3), mar=c(2,2,1,0))

for(i in 1:8){
  boxplot(car_mpg[,i], main=colnames(car_mpg)[i])
}


########################################REGRESSION########################################

#let's regress mpg on several features 
#we want the model year to be a factor (categorical) variable and not be numeric
lm1<-lm(mpg~ cylinders + displacement+horsepower+weight+factor(model_year), 
        data=car_mpg)

#return the regression results
summary(lm1) 

#that lm1 object has these attributes 
attributes(lm1)
#so you can call residuals by typing 
lm1$residuals
#etc for other attributes

#run a different model 
lm2<-lm(mpg~ cylinders + displacement+horsepower+weight, data=car_mpg)
summary(lm2)

#interaction with horsepower and weight "*" automatically puts the main effect + interaction
lm3<-lm(mpg~ cylinders + displacement+horsepower*weight, data=car_mpg)
summary(lm3)

#reset the plot layout since we modified this above in visualization
par(mfrow=c(1,1), mar=c(5,5,5,5))
#qqplot
qqnorm(lm3$residuals)
#shapiro-wilk normality test 
shapiro.test(lm3$residuals)

#just mpg on horsepower
lm4<-lm(mpg~horsepower, data=car_mpg)
summary(lm4)
plot(car_mpg$horsepower, car_mpg$mpg, ylab="MPG", xlab="Horsepower", main="MPG vs Horsepower")
abline(lm4, lwd=4)

